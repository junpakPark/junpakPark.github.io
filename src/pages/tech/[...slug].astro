---
import {type CollectionEntry, getCollection} from "astro:content";
import {getMostRecentDateFormatted, processPosts} from "../../utils";

import Categories from "../../components/Categories";
import PostList from "../../components/PostList";
import BaseLayout from "../../layouts/BaseLayout.astro";
import MainLayout from "../../layouts/MainLayout.astro";


export const getStaticPaths = async (): Promise<any[]> => {
    const allCategories: CollectionEntry<'category'>[] = await getCollection("category");
    const allPosts: CollectionEntry<"blog">[] = processPosts(await getCollection("blog"));

    return allCategories.map(category => {
        const categoryPosts: CollectionEntry<"blog">[] = allPosts.filter(post => post.data.category.id === category.id);

        return {
            params: {
                slug: category.id
            },
            props: {
                category, allCategories, allPosts, categoryPosts
            }
        }
    });
};

const {category, allCategories, allPosts, categoryPosts} = Astro.props;
---
<BaseLayout>
    <MainLayout>
        <div class="flex justify-around">
            <div class="w-[16rem] hidden lg:block">
                <Categories categories={allCategories} posts={allPosts}/>
            </div>
            <article class="mx-auto md:w-[48rem] p-[4rem] space-y-4">
                <label class="font-medium inline-flex border-b-2 border-solid border-fuchsia-400 text-fuchsia-400">{category.data.title}</label>
                <p class="text-5xl text-black font-bold whitespace-pre-wrap break-keep w-[600px]">{category.data.description}</p>
                <p class="text-black">
                    <span class="text-fuchsia-400">{categoryPosts.length}</span> Posts |
                    Last updated on {getMostRecentDateFormatted(categoryPosts)}
                </p>
                <PostList posts={categoryPosts}/>
            </article>
        </div>
    </MainLayout>
</BaseLayout>
